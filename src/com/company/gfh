   Dijkstra test = new Dijkstra();
            int[][] adjMatrix = {{0,6,3,-1,-1,-1},
                {6,0,2,5,-1,-1},
                {3,2,0,3,4,-1},
                {-1,5,3,0,2,3},
                {-1,-1,4,2,0,5},
                {-1,-1,-1,3,5,0}};
            int[] result = test.getShortestPaths(adjMatrix);
            System.out.println ("Самое короткое расстояние между вершиной 0 и всеми вершинами в графе:");
            for(int i = 0;i < result.length;i++)
            System.out.print(result[i]+" ");

                public static class Dijkstra {
                                    /*
                                     * Параметр adjMatrix: весовая матрица графа. Две вершины с весом -1 указывают, что они не могут быть напрямую связаны
                                     * Функция: вернуть кратчайшее расстояние от вершины 0 до всех остальных вершин, из которых кратчайшее расстояние от вершины 0 до вершины 0 равно 0
                                     */
                                    public int[] getShortestPaths(int[][] adjMatrix) {
                                        int [] result = new int [adjMatrix.length]; // Используется для хранения кратчайшего расстояния от вершины 0 до других вершин
                                        boolean [] used = new boolean [adjMatrix.length]; // Используется для определения, пройдена ли вершина
                                        used [0] = true; // Указывает, что вершина 0 пройдена
                                        for(int i = 1;i < adjMatrix.length;i++) {
                                            result[i] = adjMatrix[0][i];
                                            used[i] = false;
                                        }

                                        for(int i = 1;i < adjMatrix.length;i++) {
                                            int min = Integer.MAX_VALUE; // Используется для временного хранения кратчайшего расстояния от вершины 0 до i, инициализированного до максимального значения типа Integer
                                            int k = 0;
                                            for (int j = 1; j <adjMatrix.length; j ++) {// найти вершину с наименьшим расстоянием от вершины 0 до других вершин
                                                if(!used[j] && result[j] != -1 && min > result[j]) {
                                                    min = result[j];
                                                    k = j;
                                                }
                                            }
                                            used [k] = true; // Вершина с наименьшим расстоянием записывается как пройденная
                                            for (int j = 1; j <adjMatrix.length; j ++) {// Затем сравните расстояние от вершины 0 до других вершин с расстоянием после добавления средней вершины k, чтобы обновить кратчайшее расстояние
                                                if (! used [j]) {// когда вершина j не пройдена
                                                    // Прежде всего, вершина k к вершине j должна быть проходимой, в это время, когда расстояние от вершины 0 до вершины j больше, чем расстояние от вершины 0 до k до j или вершина 0 не может напрямую достичь вершины j, обновите вершину 0 до вершины j Кратчайшее расстояние
                                                    if(adjMatrix[k][j] != -1 && (result[j] > min + adjMatrix[k][j] || result[j] == -1))
                                                        result[j] = min + adjMatrix[k][j];
                                                }
                                            }
                                        }
                                        return result;
                                    }
                                }